import React, { useState, useEffect } from 'react';
import './EditProfilePage.css';
import '../Shared/Form.css';

import { auth, db } from '../../firebase';
import { doc, getDoc, setDoc } from 'firebase/firestore';
import { getStorage, ref, uploadBytes, getDownloadURL } from 'firebase/storage';

import Cropper from 'react-easy-crop';

function EditProfilePage({ navigateTo }) {
  const [newName, setNewName] = useState('');
  const [newSurname, setNewSurname] = useState('');
  const [currentPassword, setCurrentPassword] = useState('');
  const [newPassword, setNewPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');

  const [passwordValidations, setPasswordValidations] = useState({
    minLength: false,
    maxLength: false,
    hasUpper: false,
    hasLower: false,
    hasNumber: false,
  });

  const [passwordsMatch, setPasswordsMatch] = useState(false);

  const [userData, setUserData] = useState(null);

  // üîΩ Estados para upload/crop
  const [selectedFile, setSelectedFile] = useState(null);
  const [crop, setCrop] = useState({ x: 0, y: 0 });
  const [zoom, setZoom] = useState(1);
  const [croppedAreaPixels, setCroppedAreaPixels] = useState(null);
  const [croppedImage, setCroppedImage] = useState(null);
  const [showCropper, setShowCropper] = useState(false);

  useEffect(() => {
    const fetchUserData = async () => {
      try {
        const user = auth.currentUser;
        if (!user) return;

        const refUser = doc(db, 'users', user.uid);
        const snap = await getDoc(refUser);

        if (snap.exists()) {
          setUserData(snap.data());
        }
      } catch (err) {
        console.error('Erro ao buscar dados do usu√°rio:', err);
      }
    };
    fetchUserData();
  }, []);

  useEffect(() => {
    setPasswordValidations({
      minLength: newPassword.length >= 6,
      maxLength: newPassword.length <= 15,
      hasUpper: /[A-Z]/.test(newPassword),
      hasLower: /[a-z]/.test(newPassword),
      hasNumber: /[0-9]/.test(newPassword),
    });
  }, [newPassword]);

  useEffect(() => {
    setPasswordsMatch(newPassword !== '' && newPassword === confirmPassword);
  }, [newPassword, confirmPassword]);

  const handleSaveChanges = (e) => {
    e.preventDefault();
    alert('Funcionalidade "Salvar Altera√ß√µes" em constru√ß√£o!');
  };

  // ================== Crop Helpers ===================
  const createImage = (url) =>
    new Promise((resolve, reject) => {
      const image = new Image();
      image.addEventListener('load', () => resolve(image));
      image.addEventListener('error', (error) => reject(error));
      image.setAttribute('crossOrigin', 'anonymous');
      image.src = url;
    });

  const getCroppedImg = async (imageSrc, crop) => {
    const image = await createImage(imageSrc);
    const canvas = document.createElement('canvas');
    const ctx = canvas.getContext('2d');

    canvas.width = crop.width;
    canvas.height = crop.height;

    ctx.drawImage(
      image,
      crop.x,
      crop.y,
      crop.width,
      crop.height,
      0,
      0,
      crop.width,
      crop.height
    );

    return new Promise((resolve) => {
      canvas.toBlob((blob) => {
        resolve(blob);
      }, 'image/jpeg');
    });
  };

  const showCroppedImage = async () => {
    try {
      const croppedBlob = await getCroppedImg(
        URL.createObjectURL(selectedFile),
        croppedAreaPixels
      );
      setCroppedImage(croppedBlob);
      setShowCropper(false);
      handleUpload(croppedBlob);
    } catch (e) {
      console.error(e);
    }
  };

  const handleFileChange = (e) => {
    const file = e.target.files[0];
    if (!file) return;

    if (!['image/png', 'image/jpeg'].includes(file.type)) {
      alert('S√≥ aceitamos PNG ou JPEG.');
      return;
    }
    if (file.size > 2 * 1024 * 1024) {
      alert('A imagem deve ter no m√°ximo 2MB.');
      return;
    }
    setSelectedFile(file);
    setShowCropper(true);
  };

  const handleUpload = async (blob) => {
    try {
      const user = auth.currentUser;
      if (!user) return;

      const storage = getStorage();
      const storageRef = ref(storage, `profilePics/${user.uid}.jpg`);

      await uploadBytes(storageRef, blob);
      const url = await getDownloadURL(storageRef);

      await setDoc(
        doc(db, 'users', user.uid),
        { photoURL: url },
        { merge: true }
      );

      setUserData((prev) => ({ ...prev, photoURL: url }));
      alert('Foto de perfil atualizada!');
    } catch (err) {
      console.error('Erro ao enviar imagem:', err);
    }
  };

  // ===================================================

  return (
    <div className="form-page-container">
      <div className="form-container">
        <div className="profile-header">
          <div className="profile-avatar-large">
            {userData?.photoURL ? (
              <img
                src={userData.photoURL}
                alt="Avatar"
                className="avatar-img"
              />
            ) : (
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="60"
                height="60"
                viewBox="0 0 24 24"
                fill="#e0e0e0"
              >
                <path d="M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 
                        1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 
                        1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z" />
              </svg>
            )}
            {/* √≠cone de l√°pis */}
            <label htmlFor="avatar-upload" className="avatar-edit-icon">
              ‚úèÔ∏è
            </label>
            <input
              type="file"
              id="avatar-upload"
              accept="image/png, image/jpeg"
              style={{ display: 'none' }}
              onChange={handleFileChange}
            />
          </div>
          {userData && (
            <h3 className="profile-username">
              {userData.nome} {userData.sobrenome}
            </h3>
          )}
          <h2 className="form-title">Editar Perfil</h2>
        </div>

        {/* Cropper Modal */}
        {showCropper && selectedFile && (
          <div className="crop-container">
            <Cropper
              image={URL.createObjectURL(selectedFile)}
              crop={crop}
              zoom={zoom}
              aspect={1}
              onCropChange={setCrop}
              onZoomChange={setZoom}
              onCropComplete={(croppedArea, croppedPixels) =>
                setCroppedAreaPixels(croppedPixels)
              }
            />
            <button
              type="button"
              onClick={showCroppedImage}
              className="cta-button"
            >
              Confirmar Corte
            </button>
          </div>
        )}

        <form onSubmit={handleSaveChanges} className="profile-form">
          {/* Coluna da Esquerda: Informa√ß√µes Pessoais */}
          <div className="profile-column">
            <h3 className="column-title">Dados Pessoais</h3>
            <div className="form-group">
              <label htmlFor="profile-nome">NOVO NOME:</label>
              <input
                type="text"
                id="profile-nome"
                value={newName}
                onChange={(e) => setNewName(e.target.value)}
              />
            </div>
            <div className="form-group">
              <label htmlFor="profile-sobrenome">NOVO SOBRENOME:</label>
              <input
                type="text"
                id="profile-sobrenome"
                value={newSurname}
                onChange={(e) => setNewSurname(e.target.value)}
              />
            </div>
          </div>

          {/* Coluna da Direita: Altera√ß√£o de Senha */}
          <div className="profile-column">
            <h3 className="column-title">Alterar Senha</h3>
            <div className="form-group">
              <label htmlFor="profile-password">SENHA ANTIGA:</label>
              <input
                type="password"
                id="profile-password"
                value={currentPassword}
                onChange={(e) => setCurrentPassword(e.target.value)}
              />
            </div>
            <div className="form-group">
              <label htmlFor="profile-new-password">NOVA SENHA:</label>
              <input
                type="password"
                id="profile-new-password"
                value={newPassword}
                onChange={(e) => setNewPassword(e.target.value)}
              />
              <ul className="password-requirements">
                <li
                  className={`requirement-item ${
                    passwordValidations.minLength &&
                    passwordValidations.maxLength
                      ? 'valid'
                      : 'invalid'
                  }`}
                >
                  Entre 6 e 15 caracteres
                </li>
                <li
                  className={`requirement-item ${
                    passwordValidations.hasUpper ? 'valid' : 'invalid'
                  }`}
                >
                  Pelo menos 1 letra mai√∫scula
                </li>
                <li
                  className={`requirement-item ${
                    passwordValidations.hasLower ? 'valid' : 'invalid'
                  }`}
                >
                  Pelo menos 1 letra min√∫scula
                </li>
                <li
                  className={`requirement-item ${
                    passwordValidations.hasNumber ? 'valid' : 'invalid'
                  }`}
                >
                  Pelo menos 1 n√∫mero
                </li>
              </ul>
            </div>
            <div className="form-group">
              <label htmlFor="profile-confirm-password">
                REPITA A NOVA SENHA:
              </label>
              <input
                type="password"
                id="profile-confirm-password"
                value={confirmPassword}
                onChange={(e) => setConfirmPassword(e.target.value)}
              />
              {confirmPassword && !passwordsMatch && (
                <p className="requirement-item invalid">
                  A senha deve ser igual a de cima
                </p>
              )}
            </div>
          </div>
        </form>

        <button onClick={handleSaveChanges} className="cta-button">
          Salvar Altera√ß√µes
        </button>
      </div>
    </div>
  );
}

export default EditProfilePage;
